{
  "name": "signature-pad",
  "version": "2.4.1",
  "private": true,
  "license": "BSD-3-CLAUSE",
  "description": "SignaturePad: A jQuery plugin for assisting in the creation of an HTML5 canvas based signature pad. Records the drawn signature in JSON for later regeneration.",
  "homepage": "http://thomasjbradley.ca/lab/signature-pad",
  "author": {
    "name": "Thomas J Bradley",
    "email": "hey@thomasjbradley.ca",
    "url": "http://thomasjbradley.ca"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thomasjbradley/signature-pad.git"
  },
  "keywords": [
    "signatures",
    "canvas",
    "signature-pad"
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-jshint": "~0.6.0"
  },
  "gitHead": "4f1c9edb3d94c09228a7c86a65ab4c076cc13645",
  "readme": "# Examples\n\n[CAPTURING A DRAWN SIGNATURE](http://ezl.github.io/signature-pad/) -- 3 examples:\n* the original implementation\n* smoothed\n* smoothed+variable width\n\n[REGENERATING A RECORDED SIGNATURE](http://ezl.github.io/signature-pad/regeneration.html) -- 3 examples, all 3 of these are generating from the same data:\n* The first creates the signature by drawing straight line segments between sampled points\n* The second renders a cubic spline that passes through all of the sampled points\n* The third does the same as the second, but changes the width of the signature in response to perceived stroke velocity\n\n\n## Fork by EZL of Thomas Bradley's excellent signature drawing package.\n\nSignaturePad makes it possible for developers to embed an HTML5 canvas in a website that records mouse (or touch) drawn signatures, then re-renders them later.\n\nThe primary use case, for me, is to include a \"signing\" component to online rental applications and leases for my company, [Rent Application](https://www.rentapplication.net).\n\nOriginal README/documentation below my added commentary, [check out the original](https://github.com/thomasjbradley/signature-pad/)\n\n## Improvements\n\nI made a few additions to the original library:\n\n* Signature smoothing\n* Variable signature width\n* Autoresizing\n\n### Signature Smoothing\n\nThis was the major thing I wanted to accomplish.\n\nThis follows [the method outlined by Square](http://corner.squareup.com/2012/07/smoother-signatures.html)\nfor generating smooth signatures, with a few omissions.\n\n### Variable signature width\n\nDraw skinnier lines with the pen is moving faster. Draw fatter lines when the\npen is moving slower. Basically: \"What would it look like if signed with a\nfountain pen?\"\n\n### Auto resizing\n\nSignatures may be drawn and rendered/re-rendered on devices of different sizes.\nThe original libary specifies canvas dimensions in pixels, which can either:\n\n1. force the signature canvas to be wider than the viewport, which can either\n   require the user to use horizontal scroll to view the signature or be unviewable\n   on mobile devices.\n2. if the rendered canvas is smaller than the canvas on which the signature was\n   captured, parts of the signature aren't rendered (or rather, they're rendered\n   off of the regenerated canvas, and therefore aren't visible to the user)\n\nThis fork introduces an **autoscale** flag (*default: false, mirroring the\noriginal libraries behavior*), which guarantees that the full signature can\nbe rendered on the new canvas, of any size.\n\nThe **autoscale** flag will shrink OR grow the signature to fit the canvas on\nwhich it is being regenerated.\n\nTo do so, it finds the actual dimensions of the *recorded* signature, then pads\nit, remaps it to the new dimensions using html5 canvas's scale.apply() method,\nthen centers the recorded signature on the new canvas.\n\nThe centering action could be controversial (\"hey, I WANTED to only sign in the\nupper left corner!\"), but for my purposes it makes sense and I think it serves\nmost normal signature signing scenarios.\n\n## Notable differences/hacks between Square & this fork:\n\n### The basic method is the same:\n\n1. Find sampled points\n2. Compute b-spline points and then beziers which will render a cubic spline through\n   all of the sampled points.\n\nThat alone will give a smoothed signature.\n\n### But this implementation is slightly different:\n\n1. **Run the spline through only a subset of the points** : \n   The sampling rate of the original library is really fast.  As a result, there\n   are a ton of sampled points, and due to noise in sampling the location of the\n   mouse / non-smooth user mouse behavior, if you render cubic splines through\n   ALL the points, its \"smooth\" (there are no sharp angles), but the\n   rendered curve is \"squiggly\" (looks like someone wrote it with a shaky hand).\n   I completely arbitrarily decided on using 1 in 4 points for sampling.\n2. **Distance as a proxy for velocity** : \n   Square uses this to determine how thick to stroke a path, giving the signatures\n   variable stroke width throughout the rendered pen path, which is a surprisingly\n   nice, elegant feel -- like the user is drawing with a fountain pen.\n   The Square implementation samples points and timestamps as a tuple. Since the\n   original signaturepad implementation does that and ... uh... i'm lazy...\n   I opted to use distance between points as a proxy for speed.  Makes assumptions\n   that the sampling rate will be relatively constant and that \"city block\"\n   distance is a good proxy for the true path length. (It's not really, but\n   for these small sampling differences, I think the qualitative difference is\n   probably sufficient and doesn't warrant the additional overhead of computing\n   bezier lengths.  Also, its only going in my project for now, so I'm doing \n   whatever I want.)\n3. **Roll your own bezier drawing algorithm** : \n   Square is fancier than me. I'm using HTML5 canvas's built in bezier drawing\n   method.  They rolled their own.  There are a few reasons/differences:\n\n    1. Square is designing for native mobile apps -- I don't know if that\n       includes an easy bezier drawing method.  I'm designing for modern \n       browsers, which include html5 canvas's built in method.\n    2. Square's implementation lets them vary the stroke width WITHIN a single\n       bezier segment. This lets their width changes be fluid, while mine are\n       disjoint and can only change width between segments.  It's imperfect,\n       but god enough for me.\n\n\n## Improvements\n\nA few ideas for improvements:\n\n* **Max amplitude** Rather than sampling every 4th point, It'd be nice to take\n  segments, then guarantee that you're including the max-x, max-y, min-x, min-y\n  points.  This ensures that you're not cutting out points that are at the\n  boundaries of the signature.  Since I am NOT doing this now, it reduces the\n  amplitude of the stroke (loops are rendered smaller, peaks are lower).\n\n* **better variable width** Include more points and smooth it differently\n  (best fit) or, like Square, roll our own bezier plotter. There are methods\n  for efficiently rendering bezier curves given the control points, so this is\n  possible.\n* **best fit through all the points** Instead of the uniform sampling.  Signers\n  using a mouse tend to have a hard time drawing smooth signatures because the\n  device itself is awkward. As a result, even smoothed signatures made by\n  forcing splines through all the control points aren't \"beautiful\".  Unfortunately\n  this is only useful on mouse devices -- on touch devices, people are great at\n  drawing smooth signatures.  A lot of work, for little gain.\n* **Timestamps in sampling** As mentioned above, this method is using distance\n  as a proxy for velocity.  Obv with timestamp and position, we have a better sense\n  of velocity (Though we still won't know the actual path taken between 2 points,\n  so we're still not sure about velocity).\n\n\n# Signature Pad\nSignaturePad: A jQuery plugin for assisting in the creation of an HTML5 canvas based signature pad. Records the drawn signature in JSON for later regeneration.\n\nCopyright MMXI, Thomas J Bradley, <hey@thomasjbradley.ca>\n\nDependencies: FlashCanvas/1.5, json2.js, jQuery/1.3.2+\n\nVersioned using Semantic Versioning, <http://semver.org/>\n\n## Quick Start\n1. Include `jquery.signaturepad.css`, `flashcanvas.js`, `jquery.js`, `jquery.signaturepad.js`, `json2.js` in your HTML file\n2. Create the HTML, following the example: <https://github.com/thomasjbradley/signature-pad/blob/master/examples/accept-signature.html>\n3. `$('.sigPad').signaturePad();`\n4. Remember that [most things are configurable](http://thomasjbradley.ca/lab/signature-pad#options)\n\n## Complete Documentation\n<http://thomasjbradley.ca/lab/signature-pad>\n\n## Examples\n- [Accepting a Signature](https://github.com/thomasjbradley/signature-pad/blob/master/examples/accept-signature.html)\n- [Requiring a Drawn Signature](https://github.com/thomasjbradley/signature-pad/blob/master/examples/require-drawn-signature.html)\n- [Regenerating a Signature](https://github.com/thomasjbradley/signature-pad/blob/master/examples/regenerate-signature.html)\n- [Accepting Multiple Signatures](https://github.com/thomasjbradley/signature-pad/blob/master/examples/accept-multiple-signatures.html)\n\n## Demos\n- [Accepting a Signature](http://thomasjbradley.ca/lab/signature-pad-accept)\n- [Requiring a Drawn Signature](http://thomasjbradley.ca/lab/signature-pad-require-drawn)\n- [Regenerating a Signature](http://thomasjbradley.ca/lab/signature-pad-regenerate)\n\n## Converting to an Image\n<http://thomasjbradley.ca/lab/signature-pad/#images>\n\n## Source Code\n<http://github.com/thomasjbradley/signature-pad>\n\n## License\nSignature Pad is licensed under the [New BSD license](https://github.com/thomasjbradley/signature-pad/blob/master/NEW-BSD-LICENSE.txt).\n\nAll dependencies: jQuery, json2.js, and FlashCanvas retain their own licenses.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thomasjbradley/signature-pad/issues"
  },
  "_id": "signature-pad@2.4.1",
  "_shasum": "d429a8a9542edd973c8237bbc399628587e63f8c",
  "_from": "git+https://github.com/ezl/signature-pad.git",
  "_resolved": "git+https://github.com/ezl/signature-pad.git#4f1c9edb3d94c09228a7c86a65ab4c076cc13645"
}
